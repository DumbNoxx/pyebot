pre-commit:
  parallel: true
  jobs:
    - name: lint staged
      run: >
        [ -n "$SKIP_LINT_STAGED" ] && echo "Skipping hook in favor of env variable..." || pnpm exec lint-staged

skip_output:
  - meta
  - summary

prepare-commit-msg:
  commands:
    conventional-commits-prepare:
      tags: commit-msg
      run: |
        # This hook runs before the commit message is created
        # We can use it to prepare or validate the template
        echo "üìù Preparing commit message validation..."
        echo "Remember to use Conventional Commits format: <type>[optional scope]: <description>"

commit-msg:
  commands:
    conventional-commits:
      tags: commit-msg
      run: |
        # Get commit message - lefthook provides it via stdin or we can get it from git log
        if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]] || [[ "$OS" == "Windows_NT" ]]; then
          # Windows - get the commit message from git
          commit_msg=$(git log --format=%B -n 1 HEAD 2>/dev/null || echo "")
          if [ -z "$commit_msg" ]; then
            # If no commit yet, try to get from the temp file or environment
            commit_msg="$LEFTHOOK_COMMIT_MSG"
          fi
          
          powershell -Command "
            \$commitMsg = '$commit_msg'.Trim()
            if (\$commitMsg -eq '') {
              Write-Host '‚ö†Ô∏è  Empty commit message, skipping validation'
              exit 0
            }
            \$pattern = '^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(.+\))?: .{1,50}'
            if (\$commitMsg -notmatch \$pattern) {
              Write-Host '‚ùå Invalid commit message format!'
              Write-Host 'Format: <type>[optional scope]: <description>'
              Write-Host 'Types: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test'
              Write-Host 'Example: feat(auth): add login functionality'
              Write-Host 'Your message: ' + \$commitMsg
              exit 1
            }
            if (\$commitMsg.Length -gt 72) {
              Write-Host '‚ùå Commit message too long! Keep it under 72 characters.'
              Write-Host 'Current length: ' + \$commitMsg.Length
              Write-Host 'Your message: ' + \$commitMsg
              exit 1
            }
            \$description = \$commitMsg -replace '^[a-z]+(\([^)]+\))?: ', ''
            if (\$description -match '^(added|fixed|updated|changed|removed|created)') {
              Write-Host '‚ö†Ô∏è  Use imperative mood: add not added, fix not fixed'
              Write-Host 'Example: feat: add user authentication not feat: added user authentication'
              Write-Host 'Your message: ' + \$commitMsg
              exit 1
            }
            Write-Host '‚úÖ Commit message follows Conventional Commits specification'
          "
        else
          # Unix-like systems (macOS, Linux)
          # Try multiple ways to get the commit message
          commit_msg=""
          
          # Method 1: Check if we have a file argument (standard git hook behavior)
          if [ -n "$1" ] && [ -f "$1" ]; then
            commit_msg=$(cat "$1" | head -1 | tr -d '\n\r')
          fi
          
          # Method 2: Try lefthook environment variables
          if [ -z "$commit_msg" ] && [ -n "$LEFTHOOK_COMMIT_MSG" ]; then
            commit_msg="$LEFTHOOK_COMMIT_MSG"
          fi
          
          # Method 3: Check standard git environment variables
          if [ -z "$commit_msg" ] && [ -n "$GIT_COMMIT_MSG" ]; then
            commit_msg="$GIT_COMMIT_MSG"
          fi
          
          # Method 4: Read from stdin if available
          if [ -z "$commit_msg" ] && [ ! -t 0 ]; then
            commit_msg=$(head -1 | tr -d '\n\r')
          fi
          
          # Method 5: As last resort, try to get from git's internal state
          # This is a fallback and may not always work
          if [ -z "$commit_msg" ]; then
            # Check if there's a COMMIT_EDITMSG file in .git
            if [ -f ".git/COMMIT_EDITMSG" ]; then
              commit_msg=$(cat .git/COMMIT_EDITMSG | head -1 | tr -d '\n\r')
            fi
          fi
          
          # Skip if commit message is empty or starts with #
          if [ -z "$commit_msg" ] || [[ "$commit_msg" =~ ^#.* ]]; then
            echo "‚ö†Ô∏è  Empty commit message or comment, skipping validation"
            exit 0
          fi
          
          # Check conventional commit format
          if ! echo "$commit_msg" | grep -qE '^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(.+\))?: .{1,50}'; then
            echo "‚ùå Invalid commit message format!"
            echo "Format: <type>[optional scope]: <description>"
            echo "Types: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test"
            echo "Example: feat(auth): add login functionality"
            echo "Your message: $commit_msg"
            exit 1
          fi
          
          # Check message length
          if [ ${#commit_msg} -gt 72 ]; then
            echo "‚ùå Commit message too long! Keep it under 72 characters."
            echo "Current length: ${#commit_msg}"
            echo "Your message: $commit_msg"
            exit 1
          fi
          
          # Check for imperative mood in description
          description=$(echo "$commit_msg" | sed -E 's/^[a-z]+(\([^)]+\))?: //')
          if echo "$description" | grep -qE '^(added|fixed|updated|changed|removed|created)'; then
            echo "‚ö†Ô∏è  Use imperative mood: 'add' not 'added', 'fix' not 'fixed'"
            echo "Example: 'feat: add user authentication' not 'feat: added user authentication'"
            echo "Your message: $commit_msg"
            exit 1
          fi
          
          echo "‚úÖ Commit message follows Conventional Commits specification"
        fi
      fail_text: "Commit message doesn't follow Conventional Commits specification."

colors: true
no_tty: false
source_dir: ".lefthook"
source_dir_local: ".lefthook-local"

output:
  - execution
  - execution_out
  - execution_info
  - skips